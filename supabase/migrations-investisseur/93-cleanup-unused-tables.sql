-- =====================================================
-- SCRIPT 93: NETTOYAGE TABLES INUTILES (OPTIONNEL)
-- Date: 2025-01-28
-- Description: Supprime les tables inutiles de mani√®re s√©curis√©e
--              ‚ö†Ô∏è  ATTENTION: Ex√©cutez √âTAPE PAR √âTAPE
--              ‚ö†Ô∏è  V√©rifiez d'abord avec le script 92
-- =====================================================

-- ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è AVERTISSEMENT ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
-- Ce script supprime des tables de mani√®re PERMANENTE
-- Assurez-vous d'avoir:
-- 1. Fait un backup de votre base de donn√©es
-- 2. Ex√©cut√© le script 92 pour identifier les tables vides
-- 3. V√©rifi√© que vous n'en avez plus besoin

-- =====================================================
-- OPTION 1: SUPPRIMER LES TABLES VOYAGE (si pas utilis√©es)
-- =====================================================

-- D√©commentez les lignes suivantes SEULEMENT si vous √™tes S√õR
-- de ne pas utiliser le syst√®me de voyage

-- DROP TABLE IF EXISTS photos CASCADE;
-- DROP TABLE IF EXISTS depenses CASCADE;
-- DROP TABLE IF EXISTS evenements CASCADE;
-- DROP TABLE IF EXISTS checklist CASCADE;
-- DROP TABLE IF EXISTS partage CASCADE;
-- DROP TABLE IF EXISTS destinations_voyage CASCADE;
-- DROP TABLE IF EXISTS destinations CASCADE;
-- DROP TABLE IF EXISTS invites CASCADE;
-- DROP TABLE IF EXISTS voyages CASCADE;
-- DROP TABLE IF EXISTS notifications CASCADE;
-- DROP TABLE IF EXISTS subscriptions CASCADE;
-- DROP TABLE IF EXISTS user_stats CASCADE;

-- SELECT 'Tables VOYAGE supprim√©es' AS resultat;

-- =====================================================
-- OPTION 2: SUPPRIMER TABLES INVESTISSEMENT INUTILIS√âES
-- =====================================================

-- D√©commentez SEULEMENT si vous √™tes S√õR que ces tables sont vides
-- et que vous ne les utiliserez jamais

-- A. Dividendes (si jamais utilis√©)
-- DROP TABLE IF EXISTS dividend_allocations CASCADE;
-- DROP TABLE IF EXISTS dividends CASCADE;

-- B. Comptes (si jamais utilis√©)
-- DROP TABLE IF EXISTS capex_accounts CASCADE;
-- DROP TABLE IF EXISTS current_accounts CASCADE;
-- DROP TABLE IF EXISTS rnd_accounts CASCADE;

-- C. D√©penses op√©rationnelles (si jamais utilis√©)
-- DROP TABLE IF EXISTS operational_expenses CASCADE;

-- D. Rapports (si jamais utilis√©)
-- DROP TABLE IF EXISTS reports CASCADE;

-- E. Documents (si syst√®me de pi√®ces jointes diff√©rent)
-- DROP TABLE IF EXISTS documents CASCADE;

-- SELECT 'Tables investissement inutilis√©es supprim√©es' AS resultat;

-- =====================================================
-- OPTION 3: NETTOYER LES ANCIENNES MIGRATIONS/TABLES DE TEST
-- =====================================================

-- Tables potentiellement cr√©√©es pendant les tests
-- DROP TABLE IF EXISTS test_table CASCADE;
-- DROP TABLE IF EXISTS tmp_investors CASCADE;
-- DROP TABLE IF EXISTS backup_transactions CASCADE;

-- =====================================================
-- OPTION 4: SUPPRESSION S√âCURIS√âE TABLE PAR TABLE
-- =====================================================

-- Pour supprimer une table sp√©cifique de mani√®re s√©curis√©e:
-- 1. V√©rifier le nombre de lignes
-- 2. V√©rifier les foreign keys
-- 3. Supprimer

-- Exemple pour "operational_expenses":
DO $$
DECLARE
  v_count INTEGER;
  v_fkeys TEXT;
BEGIN
  -- V√©rifier nombre de lignes
  SELECT COUNT(*) INTO v_count FROM operational_expenses;

  IF v_count = 0 THEN
    RAISE NOTICE '‚úÖ operational_expenses a 0 lignes, suppression s√©curis√©e';

    -- V√©rifier les foreign keys pointant vers cette table
    SELECT string_agg(conname, ', ')
    INTO v_fkeys
    FROM pg_constraint
    WHERE confrelid = 'operational_expenses'::regclass;

    IF v_fkeys IS NULL THEN
      RAISE NOTICE '‚úÖ Aucune foreign key ne pointe vers cette table';
      -- D√©commentez la ligne suivante pour supprimer
      -- DROP TABLE operational_expenses CASCADE;
      -- RAISE NOTICE '‚úÖ Table operational_expenses supprim√©e';
    ELSE
      RAISE NOTICE '‚ö†Ô∏è  Foreign keys trouv√©es: %', v_fkeys;
      RAISE NOTICE '‚ö†Ô∏è  Supprimez d''abord les contraintes ou utilisez CASCADE';
    END IF;
  ELSE
    RAISE NOTICE '‚ùå operational_expenses contient % lignes, suppression ANNUL√âE', v_count;
  END IF;
END $$;

-- =====================================================
-- V√âRIFICATION POST-SUPPRESSION
-- =====================================================

-- Lister les tables restantes
SELECT
  'üìã TABLES RESTANTES' AS etape,
  tablename,
  pg_size_pretty(pg_total_relation_size('public.' || tablename)) AS taille
FROM pg_tables
WHERE schemaname = 'public'
ORDER BY tablename;

-- =====================================================
-- MESSAGE FINAL
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '‚ö†Ô∏è  RAPPEL IMPORTANT:';
  RAISE NOTICE '';
  RAISE NOTICE '   Ce script est fourni COMMENT√â par s√©curit√©';
  RAISE NOTICE '   D√©commentez SEULEMENT les tables que vous √™tes S√õR de vouloir supprimer';
  RAISE NOTICE '';
  RAISE NOTICE '   Recommandations:';
  RAISE NOTICE '   1. Ex√©cutez d''abord le script 92 pour identifier les tables vides';
  RAISE NOTICE '   2. Faites un backup de votre base de donn√©es';
  RAISE NOTICE '   3. D√©commentez UNE table √† la fois';
  RAISE NOTICE '   4. V√©rifiez apr√®s chaque suppression';
  RAISE NOTICE '';
END $$;
