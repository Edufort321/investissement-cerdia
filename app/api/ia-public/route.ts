import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import path from 'path'
import { promises as fs } from 'fs'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(req: NextRequest) {
  try {
    const { prompt } = await req.json()

    if (!prompt || prompt.trim() === '') {
      return NextResponse.json({ result: '‚ùå Aucun message re√ßu.' })
    }

    console.log('üì© Prompt re√ßu :', prompt)

    // Lecture de la vision strat√©gique CERDIA
    const filePath = path.join(process.cwd(), 'public', 'vision_cerdia_2025_2045.txt')
    const vision = await fs.readFile(filePath, 'utf8')

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: `
Tu es l‚Äôintelligence officielle de la plateforme Investissement CERDIA. Voici le plan strat√©gique :

${vision}

Tu dois uniquement r√©pondre √† des questions li√©es √† :
- L‚Äôimmobilier locatif strat√©gique de CERDIA
- La rentabilit√©, la croissance, le FBA, le jeton Allcoin
- La vision d‚Äôentreprise 2025‚Äì2045

‚ùå Si la question sort de ce cadre, r√©ponds :
¬´ Pour toute question sp√©cifique ou demande d‚Äôinvestissement, veuillez √©crire √† eric.dufort@cerdia.ai. ¬ª

R√©ponds de mani√®re professionnelle, align√©e sur la vision.
          `.trim(),
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      temperature: 0.7,
    })

    const result = completion.choices?.[0]?.message?.content?.trim()
    if (!result) {
      return NextResponse.json({ result: '‚ùå R√©ponse vide de l‚ÄôIA.' })
    }

    return NextResponse.json({ result })
  } catch (error: any) {
    console.error('‚ùå Erreur IA CERDIA :', error)

    if (error.code === 'invalid_api_key') {
      return NextResponse.json({ error: '‚ùå Cl√© API OpenAI invalide.' }, { status: 401 })
    }

    if (error.response?.status === 429) {
      return NextResponse.json(
        { error: '‚è≥ Quota d√©pass√© ou trop de requ√™tes √† la fois.' },
        { status: 429 }
      )
    }

    return NextResponse.json(
      { result: '‚ùå IA indisponible pour le moment. R√©essayez plus tard.' },
      { status: 500 }
    )
  }
}
