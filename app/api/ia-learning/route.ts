'use server'

import { NextRequest, NextResponse } from 'next/server'
import { readFile } from 'fs/promises'
import { revalidatePath } from 'next/cache'

// M√©moire dynamique pour apprentissage compl√©mentaire (manuel ou API)
let cerdiapedia: string[] = [
  "CERDIA a √©t√© fond√©e en 2025 par √âric Dufort.",
  "La strat√©gie vise une rentabilit√© nette de 15 √† 20 %.",
  "L'entreprise fonctionne sans dette bancaire.",
  "CERDIA Commerce r√©injecte tous les profits dans l'immobilier."
]

export async function POST(req: NextRequest) {
  try {
    const { note } = await req.json()

    if (!note || typeof note !== 'string') {
      return NextResponse.json({ error: '‚ùå Donn√©e invalide.' }, { status: 400 })
    }

    cerdiapedia.unshift(note.trim())

    console.log('üß† Nouvelle connaissance ajout√©e √† CERDIA IA :', note)

    revalidatePath('/ia')
    return NextResponse.json({ success: true, message: 'Connaissance ajout√©e avec succ√®s.' })
  } catch (error) {
    console.error('‚ùå Erreur IA m√©moire :', error)
    return NextResponse.json({ error: 'Erreur interne serveur.' }, { status: 500 })
  }
}

export async function GET() {
  try {
    const vision = await readFile('/mnt/data/vision_cerdia_2025_2045.txt', 'utf-8')
    return NextResponse.json({ cerdiapedia, vision })
  } catch (err) {
    console.error('‚ùå Erreur lecture fichier vision :', err)
    return NextResponse.json({ error: 'Erreur de lecture du fichier vision.' }, { status: 500 })
  }
}
